name: Alpine ROS 1 test workflow
on:
  workflow_call:
    inputs:
      ros-distro:
        description: "ROS distribution name"
        type: string
        default: noetic
      alpine-version:
        description: "Alpine Linux version"
        type: string
        default: "3.20"
      enable-bot-comment:
        description: "Post test result as a bot comment"
        type: boolean
        default: false
      bot-comment-api-base:
        description: "GitHub API base URL to post a bot comment"
        type: string
        default: ""
      enable-codecov:
        description: "Upload coverage report to Codecov"
        type: boolean
        default: false
      abuild-env:
        description: "Environment variables applied to abuild container"
        type: string
        default: ""
      repository:
        description: "Repository slug to checkout. Mainly for internal testing"
        type: string
        default: ${{ github.repository }}
      ref:
        description: "Repository ref to checkout. Mainly for internal testing"
        type: string
        default: ""
      internal-dryrun-codecov:
        description: "[internal] Process coverage report but do not upload"
        type: boolean
        default: false
    secrets:
      bot-comment-token:
        required: false
      codecov-upload-token:
        required: false

env:
  ROS_DISTRO: ${{ inputs.ros-distro }}
  ALPINE_VERSION: ${{ inputs.alpine-version }}

jobs:
  test:
    name: alpine-ros1-test / ${{ inputs.ros-distro }}-${{ inputs.alpine-version }}
    runs-on: ubuntu-latest
    env:
      APORTS_DIR: /tmp/abuild/aports
      BUILD_LOG_DIR: /tmp/abuild/build-logs
      ROS_LOG_DIR: /tmp/abuild/ros-logs
      BUILD_CACHE_DIR: /tmp/abuild/ccache
      GCOV_DIR: /tmp/abuild/gcov
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}

      - name: Cache cpp build
        id: cache-cpp-build
        uses: actions/cache@v4
        with:
          path: ${{ env.BUILD_CACHE_DIR }}
          key: abuild-cache-${{ inputs.ros-distro }}-${{ inputs.alpine-version }}-${{ github.sha }}
          restore-keys: abuild-cache-${{ inputs.ros-distro }}-${{ inputs.alpine-version }}-

      - name: Install gh-pr-comment
        if: inputs.enable-bot-comment
        uses: at-wat/setup-gh-pr-comment@v0
      - name: Login to public GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Test
        id: test
        env:
          ABUILD_ENV: ${{ inputs.abuild-env }}
        run: |
          env_file=$(mktemp)
          printenv ABUILD_ENV >${env_file}

          mkdir -p ${APORTS_DIR} ${BUILD_LOG_DIR} ${ROS_LOG_DIR} ${BUILD_CACHE_DIR} ${GCOV_DIR}
          chmod -R a+rw ${APORTS_DIR} ${BUILD_LOG_DIR} ${ROS_LOG_DIR} ${BUILD_CACHE_DIR} ${GCOV_DIR}
          docker run --rm \
            -e JOBS=$(nproc) \
            -e ENABLE_CCACHE="yes" \
            -e CCACHE_DEPEND="true" \
            -e CCACHE_MAXSIZE="500M" \
            -e ROS_LOG_DIR=/home/builder/.ros/log \
            -e ROSCONSOLE_FORMAT='[${severity}] [${time}] [${node}]: ${message}' \
            -e ROS_HOSTNAME=localhost \
            -e CFLAGS=-coverage \
            -e CXXFLAGS=-coverage \
            --env-file ${env_file} \
            -v $(pwd):/src/$(basename $(pwd)):ro \
            -v ${APORTS_DIR}:/aports \
            -v ${BUILD_LOG_DIR}:/logs \
            -v ${ROS_LOG_DIR}:/home/builder/.ros/log \
            -v ${BUILD_CACHE_DIR}:/ccache \
            -v ${GCOV_DIR}:/tmp/gcov \
            ghcr.io/alpine-ros/ros-abuild:${ALPINE_VERSION}-${ROS_DISTRO}
      - name: Report test results
        if: always() && inputs.enable-bot-comment
        env:
          GITHUB_API_URL_BASE: ${{ inputs.bot-comment-api-base }}
          GITHUB_COMMENT_TOKEN: ${{ secrets.bot-comment-token }}
        run: |
          if [ -z "${GITHUB_API_URL_BASE}" ]; then
            unset GITHUB_API_URL_BASE
          fi

          title=
          case "${{ steps.test.conclusion }}" in
            success)
              title=":white_check_mark: Passed"
              ;;
            cancelled)
              exit 0
              ;;
            *)
              title=":x: Failed"
              ;;
          esac
          gh-pr-comment "${title} ${ROS_DISTRO} ${ALPINE_VERSION}" \
            "<details><summary>Log summary</summary>

          - [Action Run Summary](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})

          $(cat ${BUILD_LOG_DIR}/summary.log)
          </details>
          "

      - name: Process coverage reports
        if: inputs.enable-codecov
        env:
          COVERAGE_PROCESSOR: |
            #!/bin/sh

            set -eu

            REPORT_DIR=coverage
            GCOV_DIR=/tmp/gcov
            APORTS_DIR=/aports

            mkdir -p ${REPORT_DIR}
            cd ${REPORT_DIR}

            echo "::group::rostest gcov files"
            find ${GCOV_DIR} -name "*.gcda" | sed "s|^${GCOV_DIR}/||" | while read file; do
              id=$(echo ${file} | cut -d'/' -f1)
              rel_path=$(echo ${file} | sed 's|^.*/build_isolated/||')
              pkg=$(echo ${rel_path} | cut -d'/' -f1)

              gcda=${GCOV_DIR}/${file}
              new_gcda=$(echo ${rel_path} | sed "s|/\(\S*\)\.gcda$|/\1.${id}.gcda|")
              gcno=${APORTS_DIR}/${ROS_DISTRO}/${pkg}/abuild/build_isolated/${rel_path%.gcda}.gcno
              new_gcno=${new_gcda%.gcda}.gcno

              if [ ! -f ${gcno} ]; then
                echo "- skipping gcda without gcno: ${rel_path}"
                continue
              fi

              mkdir -p $(dirname ${new_gcda})
              cp ${gcda} ${new_gcda}
              cp ${gcno} ${new_gcno}
              echo "- ${rel_path}"
            done
            echo "::endgroup::"

            echo "::group::gtest gcov files"
            find ${APORTS_DIR} -name "*.gcda" | sed "s|^${APORTS_DIR}/||" | while read file; do
              rel_path=$(echo ${file} | sed 's|^.*/build_isolated/||')
              pkg=$(echo ${rel_path} | cut -d'/' -f1)

              gcda=${APORTS_DIR}/${file}
              new_gcda=${rel_path}
              gcno=${gcda%.gcda}.gcno
              new_gcno=${new_gcda%.gcda}.gcno

              if [ ! -f ${gcno} ]; then
                echo "- skipping gcda without gcno: ${rel_path}"
                continue
              fi

              mkdir -p $(dirname ${new_gcda})
              cp ${gcda} ${new_gcda}
              cp ${gcno} ${new_gcno}
              echo "- ${rel_path}"
            done
            echo "::endgroup::"

            echo "::group::processing gcov files"
            mkdir -p tmp
            find . -name "*.gcda" | while read file; do
              echo "- ${file}"
              pkg=$(echo ${file} | cut -d'/' -f2)
              id=$(echo ${file} | md5sum | cut -d' ' -f1)
              (
                cd tmp
                gcov \
                  -s "/aports/${ROS_DISTRO}/${pkg}/abuild/src" \
                  -p ../${file} \
                  -r \
                  >/dev/null
                find . -name '*.gcov' | while read gcov_file; do
                  mv ${gcov_file} ../${gcov_file%.gcov}.${id}.gcov
                done
              )
            done
            echo "::endgroup::"

            echo "::group::generated gcov files"
            find . -name "*.gcov" | while read file; do
              echo "- ${file}"
            done
            echo "::endgroup::"
        run: |
          echo "${COVERAGE_PROCESSOR}" >coverage.sh
          chmod a+x coverage.sh
          mkdir -p coverage
          chmod a+rw coverage

          docker run --rm \
            -e ROS_DISTRO \
            -v $(pwd):/self \
            -v ${APORTS_DIR}:/aports:ro \
            -v ${GCOV_DIR}:/tmp/gcov:ro \
            --entrypoint /self/coverage.sh \
            -w /self \
            ghcr.io/alpine-ros/ros-abuild:${ALPINE_VERSION}-${ROS_DISTRO}

      - uses: codecov/codecov-action@v5
        if: inputs.enable-codecov && inputs.internal-dryrun-codecov != 'true'
        with:
          token: ${{ secrets.codecov-upload-token }}

      - name: Upload ROS logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ inputs.ros-distro }}-${{ inputs.alpine-version }}
          path: ${{ env.ROS_LOG_DIR }}
          retention-days: 1

      - name: Always cache cpp build
        uses: actions/cache/save@v4
        if: always() && steps.cache-cpp-build.outputs.cache-hit != 'true'
        with:
          path: ${{ env.BUILD_CACHE_DIR }}
          key: abuild-cache-${{ inputs.ros-distro }}-${{ inputs.alpine-version }}-${{ github.sha }}

  hide-old-bot-comments:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false && inputs.enable-bot-comment
    steps:
      - name: Escape version string
        id: escaped
        run: echo 'alpine-version=${{ inputs.alpine-version }}' | sed 's/\./\\./' >> ${GITHUB_OUTPUT}
      - name: Hide old bot comments
        uses: kamatama41/hide-pr-comments-action@v0
        with:
          github_token: ${{ github.token }}
          message_regex: "## (:white_check_mark: Passed|:x: Failed) ${{ inputs.ros-distro }} ${{ steps.escaped.outputs.alpine-version }}"
